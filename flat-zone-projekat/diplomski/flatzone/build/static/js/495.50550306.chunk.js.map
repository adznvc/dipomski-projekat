{"version":3,"file":"static/js/495.50550306.chunk.js","mappings":"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","sources":["Containers/Register/register.js","data/firebase.js"],"sourcesContent":["import * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useContext, useState} from \"react\";\r\nimport AuthContext from '../../store/auth-context';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { app } from '../../data/firebase';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport {Alert, IconButton, Snackbar} from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\n\r\nexport default function Register () {\r\n    const navigate = useNavigate();\r\n    const {control, handleSubmit, watch, register, errors} = useForm({\r\n        mode: \"all\",\r\n        reValidateMode: \"onBlur\",\r\n    });\r\n    const routeHome = () => {\r\n        let path = `/home`;\r\n        navigate(path);\r\n    };\r\n\r\n    const routeChange = () => {\r\n        let path = `/login`;\r\n        navigate(path);\r\n    };\r\n\r\n    const authCtx = useContext(AuthContext);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [openError, setOpenError] = React.useState(false);\r\n    const [openSuccess, setOpenSuccess] = React.useState(false);\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n    const [successMessage, setSuccessMessage] = React.useState('');\r\n    const handleErrorClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        setOpenError(false);\r\n    };\r\n    const handleSuccessClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        setOpenSuccess(false);\r\n    };\r\n    const onSubmit = async (data) => {\r\n\r\n        setIsLoading(true);\r\n       let url;\r\n        url =\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDzUkDmXRepWIZxhwUQs4AVd-__LAdH98k';\r\n        await fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                email: data.email,\r\n                password: data.password,\r\n                returnSecureToken: true,\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n        let urlRegister;\r\n        urlRegister = 'https://flat-zone-9f598-default-rtdb.europe-west1.firebasedatabase.app/users.json';\r\n        await fetch(urlRegister, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                firstName: data.firstName,\r\n                lastName: data.lastName,\r\n                email: data.email,\r\n                password: data.password,\r\n                phoneNumber: data.phone,\r\n            }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n            .then((res) => {\r\n                setIsLoading(false);\r\n                if (res.ok) {\r\n                    setSuccessMessage('Registered');\r\n                    setOpenSuccess(true);\r\n                    setIsLoading(true)\r\n                    return res.json();\r\n                } else {\r\n                    return res.json().then((data) => {\r\n                        setErrorMessage('Authentication failed!');\r\n                        setOpenError(true);\r\n                        setIsLoading(true)\r\n                        return res.json();\r\n                    });\r\n                }\r\n            })\r\n\r\n            .then((data) => {\r\n                const expirationTime = new Date(\r\n                    new Date().getTime() + +data.expiresIn * 1000\r\n                );\r\n                authCtx.login(data.idToken, expirationTime);\r\n                localStorage.setItem('idUser', data.localId);\r\n                navigate('/login');\r\n                console.log(data)\r\n\r\n            });\r\n    };\r\n\r\n    const action = (\r\n        <React.Fragment>\r\n            <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleSuccessClose}\r\n            >\r\n                <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n    const actionErr = (\r\n        <React.Fragment>\r\n            <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleErrorClose}\r\n            >\r\n                <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n    return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: \"#0277bd\" }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                      Register\r\n                    </Typography>\r\n                    <Grid container  direction=\"row\" alignItems=\"center\" gap={1}>\r\n                                <ArrowBackIcon onClick={routeHome} />\r\n                        <Typography variant=\"body1\" >Back</Typography>\r\n                    </Grid>\r\n                    <Box component=\"form\"\r\n                         onSubmit={handleSubmit(onSubmit)}\r\n                         sx={{mt: 3}}>\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"firstName\"\r\n                            defaultValue=\"\"\r\n                            render={({field, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    sx={{ mt: 3, mb: 2 }}\r\n                                    {...field}\r\n                                    type=\"text\"\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"First Name\"\r\n                                    error={!!error}\r\n                                    helperText={error ? error.message : \"\"}\r\n                                />\r\n                            )}\r\n                            rules={{\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"First name is required\",\r\n                                },\r\n                                pattern: {\r\n                                    value: /[A-Za-z]/,\r\n                                    message:\r\n                                        \"Sorry this form can only handle names with characters\"\r\n                                }\r\n                            }}\r\n                        />\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"lastName\"\r\n                            defaultValue=\"\"\r\n                            render={({field, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    sx={{ mt: 3, mb: 2 }}\r\n                                    {...field}\r\n                                    type=\"text\"\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Last Name\"\r\n                                    error={!!error}\r\n                                    helperText={error ? error.message : \"\"}\r\n                                />\r\n                            )}\r\n                            rules={{\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Last name is required\",\r\n                                },\r\n                                pattern: {\r\n                                    value: /[A-Za-z]/,\r\n                                    message:\r\n                                        \"Sorry this form can only handle names with characters\"\r\n                                }\r\n                            }}\r\n                        />\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"email\"\r\n                            defaultValue=\"\"\r\n                            render={({field, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    sx={{ mt: 3, mb: 2 }}\r\n                                    {...field}\r\n                                    type=\"text\"\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"E-mail\"\r\n                                    error={!!error}\r\n                                    helperText={error ? error.message : \"\"}\r\n\r\n                                />\r\n                            )}\r\n                            rules={{\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"required email address\"\r\n\r\n                                },\r\n                                // pattern: {\r\n                                //     value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/,\r\n                                //     message: \"invalid email address\"\r\n                                // }\r\n                            }}\r\n                        />\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"password\"\r\n                            defaultValue=\"\"\r\n                            render={({field, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    sx={{ mt: 3, mb: 2 }}\r\n                                    {...field}\r\n                                    type=\"password\"\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Password\"\r\n                                    error={!!error}\r\n                                    helperText={error ? error.message : \"\"}\r\n\r\n\r\n                                />\r\n                            )}\r\n                            rules={{\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Password is required\",\r\n                                },\r\n                                minLength: {\r\n                                    value: 8,\r\n                                    message: \"Password must have at least 8 characters\"\r\n                                }\r\n                            }}\r\n                        />\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"password_repeat\"\r\n                            defaultValue=\"\"\r\n                            render={({field, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    sx={{ mt: 3, mb: 2 }}\r\n                                    {...field}\r\n                                    name=\"password_repeat\"\r\n                                    type=\"password\"\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Confirm password\"\r\n                                    error={!!error}\r\n                                    helperText={error ? error.message : \"\"}\r\n                                />\r\n\r\n                            )}\r\n                            rules={{\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Password is required\",\r\n                                },\r\n                                minLength: {\r\n                                    value: 8,\r\n                                    message: \"Password must have at least 8 characters\"\r\n                                }\r\n                            }}\r\n                        />\r\n\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"phone\"\r\n                            defaultValue=\"\"\r\n                            render={({field, fieldState: {error}}) => (\r\n                                <TextField\r\n                                    sx={{ mt: 3, mb: 2 }}\r\n                                    {...field}\r\n                                    type=\"number\"\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Phone Number\"\r\n                                    error={!!error}\r\n                                    helperText={error ? error.message : \"\"}\r\n                                />\r\n                            )}\r\n                            rules={{\r\n                                required: {\r\n                                    value: true,\r\n                                    message: \"Phone number is required\",\r\n                                },\r\n                            }}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2, bgcolor: \"#0277bd\" }}>\r\n                          Submit\r\n                        </Button>\r\n                        <Grid container sx={{ mt: 2, mb: 2 }}>\r\n                            <Grid item>\r\n                                <Link  variant=\"body2\"  onClick={routeChange}>\r\n                                    {\"You already have a user account? Sign in here\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Snackbar\r\n                            open={openError}\r\n                            message={errorMessage}\r\n                            autoHideDuration={3000}\r\n                            variant=\"error\"\r\n                            onClose={handleErrorClose}\r\n                            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                            action={actionErr}\r\n                        ><Alert variant=\"filled\" action={actionErr} severity=\"error\">{errorMessage}</Alert></Snackbar>\r\n                        <Snackbar\r\n                            open={openSuccess}\r\n                            message={successMessage}\r\n                            autoHideDuration={3000}\r\n                            onClose={handleSuccessClose}\r\n                            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                            variant=\"success\"\r\n                            action={action}\r\n                        ><Alert variant=\"filled\"  action={action} severity=\"success\">{successMessage}</Alert></Snackbar>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n\r\n    )\r\n}\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport {getAuth} from \"firebase/auth\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDzUkDmXRepWIZxhwUQs4AVd-__LAdH98k\",\r\n    authDomain: \"flat-zone-9f598.firebaseapp.com\",\r\n    projectId: \"flat-zone-9f598\",\r\n    storageBucket: \"flat-zone-9f598.appspot.com\",\r\n    messagingSenderId: \"1083728366416\",\r\n    appId: \"1:1083728366416:web:ef021a170b9db8ecdd3a55\",\r\n    measurementId: \"G-ZWKBPLR54E\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nconst authentication = getAuth();\r\nexport const storage = getStorage(app);\r\n\r\n\r\n"],"names":["Register","navigate","useNavigate","_useForm","useForm","mode","reValidateMode","control","handleSubmit","authCtx","watch","register","errors","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","setIsLoading","_React$useState","React","_React$useState2","openError","setOpenError","_React$useState3","_React$useState4","openSuccess","setOpenSuccess","_React$useState5","_React$useState6","errorMessage","setErrorMessage","_React$useState7","_React$useState8","successMessage","setSuccessMessage","handleErrorClose","event","reason","handleSuccessClose","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","firstName","lastName","phoneNumber","phone","then","res","ok","json","expirationTime","Date","getTime","expiresIn","login","idToken","localStorage","setItem","localId","console","log","stop","_x","apply","arguments","action","_jsx","children","IconButton","size","color","onClick","CloseIcon","fontSize","actionErr","_jsxs","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","Grid","container","direction","gap","ArrowBackIcon","mt","Controller","name","defaultValue","render","_ref2","field","error","fieldState","TextField","_objectSpread","mb","type","required","fullWidth","label","helperText","message","rules","value","pattern","_ref3","_ref4","_ref5","minLength","_ref6","_ref7","Button","item","Link","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","getAnalytics","getAuth","getStorage"],"sourceRoot":""}