{"version":3,"file":"static/js/602.d69dcb3c.chunk.js","mappings":"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","sources":["Containers/Login/log.js","data/firebase.js"],"sourcesContent":["// noinspection ES6CheckImport,JSVoidFunctionReturnValueUsed\r\nimport * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport {blue} from \"@mui/material/colors\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {useContext, useState} from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport { getAuth} from 'firebase/auth';\r\nimport { app } from '../../data/firebase';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {Alert, IconButton, Snackbar} from \"@mui/material\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nexport default function LogIn() {\r\n    let navigate = useNavigate();\r\n\r\n    const routeChange = () => {\r\n        let path = `/register`;\r\n        navigate(path);\r\n    };\r\n    const routeHome = () => {\r\n        let path = `/home`;\r\n        navigate(path);\r\n    };\r\n    const routeAdmin = () => {\r\n        let path = `/admin`;\r\n        navigate(path);\r\n    };\r\n\r\n    const {control, handleSubmit} = useForm({\r\n        mode: \"all\",\r\n        reValidateMode: \"onBlur\",\r\n    });\r\n    const authCtx = useContext(AuthContext);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [openError, setOpenError] = React.useState(false);\r\n    const [openSuccess, setOpenSuccess] = React.useState(false);\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n    const [successMessage, setSuccessMessage] = React.useState('');\r\n    const handleErrorClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        setOpenError(false);\r\n    };\r\n    const handleSuccessClose = (event: React.SyntheticEvent | Event, reason?: string) => {\r\n        setOpenSuccess(false);\r\n    };\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        setIsLoading(true);\r\n        let url;\r\n\r\n        url =\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDzUkDmXRepWIZxhwUQs4AVd-__LAdH98k';\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                email: data.email,\r\n                password:data.password,\r\n                returnSecureToken: true,\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then((res) => {\r\n                setIsLoading(false);\r\n                if (res.ok) {\r\n                    setSuccessMessage('Login success');\r\n                    setOpenSuccess(true);\r\n                    setIsLoading(true)\r\n                    return res.json();\r\n                } else {\r\n                    return res.json().then((data) => {\r\n                        setErrorMessage('Authentication failed!');\r\n                        setOpenError(true);\r\n                        setIsLoading(true)\r\n                        return res.json();\r\n                    });\r\n                }\r\n            })\r\n\r\n            .then((data) => {\r\n                const expirationTime = new Date(\r\n                    new Date().getTime() + +data.expiresIn * 3600\r\n                );\r\n                navigate('/admin');\r\n                authCtx.login(data.idToken, expirationTime);\r\n                localStorage.setItem('idUser', data.localId);\r\n                localStorage.setItem('email', data.email);\r\n            })\r\n    };\r\n    const action = (\r\n        <React.Fragment>\r\n            <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleSuccessClose}\r\n            >\r\n                <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n    const actionErr = (\r\n        <React.Fragment>\r\n            <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleErrorClose}\r\n            >\r\n                <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n    return (\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <Box\r\n                        sx={{\r\n                            marginTop: 8,\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            alignItems: 'center',\r\n                        }}\r\n                    >\r\n                        <Avatar sx={{ m: 1, bgcolor: blue[500] }}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Log in\r\n                        </Typography>\r\n                        <Grid container  direction=\"row\" alignItems=\"center\" gap={1}>\r\n                            <ArrowBackIcon onClick={routeHome} />\r\n                            <Typography variant=\"body1\">Back</Typography>\r\n                        </Grid>\r\n                        <Box component=\"form\"\r\n                             onSubmit={handleSubmit(onSubmit)}\r\n                             sx={{mt: 2}}>\r\n                            <Controller\r\n                                control={control}\r\n                                name=\"email\"\r\n                                defaultValue=\"\"\r\n                                render={({field, fieldState: {error}}) => (\r\n                                    <TextField\r\n                                        sx={{ mt: 3, mb: 2 }}\r\n                                        {...field}\r\n                                        type=\"text\"\r\n                                        required\r\n                                        fullWidth\r\n                                        label=\"E-mail\"\r\n                                        error={!!error}\r\n                                        helperText={error ? error.message : \"\"}\r\n\r\n                                    />\r\n                                )}\r\n                                rules={{\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: \"required email address\"\r\n\r\n                                    },\r\n                                }}\r\n                            />\r\n                            <Controller\r\n                                control={control}\r\n                                name=\"password\"\r\n                                defaultValue=\"\"\r\n                                render={({field, fieldState: {error}}) => (\r\n                                    <TextField\r\n                                        sx={{ mt: 3, mb: 2 }}\r\n                                        {...field}\r\n                                        type=\"password\"\r\n                                        required\r\n                                        fullWidth\r\n                                        label=\"Password\"\r\n                                        error={!!error}\r\n                                        helperText={error ? error.message : \"\"}\r\n                                    />\r\n                                )}\r\n                                rules={{\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: \"Password is required\",\r\n                                    },\r\n                                }}\r\n                            />\r\n\r\n                          <Button  fullWidth type=\"submit\"  variant=\"contained\" onSubmit={routeAdmin}>Submit</Button>\r\n                            <Grid container sx={{ mt: 2, mb: 2 }}>\r\n                                <Grid item>\r\n                                    <Link  variant=\"body2\"  onClick={routeChange}>\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Snackbar\r\n                            open={openError}\r\n                            message={errorMessage}\r\n                            autoHideDuration={5000}\r\n                            variant=\"error\"\r\n                            onClose={handleErrorClose}\r\n                            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                            action={actionErr}\r\n                        ><Alert variant=\"filled\"         action={actionErr} severity=\"error\">{errorMessage}</Alert></Snackbar>\r\n                        <Snackbar\r\n                            open={openSuccess}\r\n                            message={successMessage}\r\n                            autoHideDuration={4000}\r\n                            onClose={handleSuccessClose}\r\n                            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                            variant=\"success\"\r\n                            action={action}\r\n                        >\r\n                            <Alert variant=\"filled\"  action={action} severity=\"success\">{successMessage}</Alert>\r\n                        </Snackbar>\r\n                    </Box>\r\n                </Container>\r\n    );\r\n}\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport {getAuth} from \"firebase/auth\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDzUkDmXRepWIZxhwUQs4AVd-__LAdH98k\",\r\n    authDomain: \"flat-zone-9f598.firebaseapp.com\",\r\n    projectId: \"flat-zone-9f598\",\r\n    storageBucket: \"flat-zone-9f598.appspot.com\",\r\n    messagingSenderId: \"1083728366416\",\r\n    appId: \"1:1083728366416:web:ef021a170b9db8ecdd3a55\",\r\n    measurementId: \"G-ZWKBPLR54E\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\nconst authentication = getAuth();\r\nexport const storage = getStorage(app);\r\n\r\n\r\n"],"names":["LogIn","navigate","useNavigate","_useForm","useForm","mode","reValidateMode","control","handleSubmit","authCtx","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","setIsLoading","_React$useState","React","_React$useState2","openError","setOpenError","_React$useState3","_React$useState4","openSuccess","setOpenSuccess","_React$useState5","_React$useState6","errorMessage","setErrorMessage","_React$useState7","_React$useState8","successMessage","setSuccessMessage","handleErrorClose","event","reason","handleSuccessClose","action","_jsx","children","IconButton","size","color","onClick","CloseIcon","fontSize","actionErr","_jsxs","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","blue","LockOutlinedIcon","Typography","variant","Grid","container","direction","gap","ArrowBackIcon","onSubmit","data","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","expirationTime","Date","getTime","expiresIn","login","idToken","localStorage","setItem","localId","mt","Controller","name","defaultValue","render","_ref","field","error","fieldState","TextField","_objectSpread","mb","type","required","fullWidth","label","helperText","message","rules","value","_ref2","Button","item","Link","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","getAnalytics","getAuth","getStorage"],"sourceRoot":""}